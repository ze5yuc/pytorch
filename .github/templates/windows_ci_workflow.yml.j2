{% import 'common.yml.j2' as common %}

{%- macro wait_and_kill_ssh() -%}
      - name: Wait until all sessions have drained
        shell: powershell
        if: always()
        timeout-minutes: 120
        run: |
          .github\scripts\wait_for_ssh_to_drain.ps1
      - name: Kill active ssh sessions if still around (Useful if workflow was cancelled)
        shell: powershell
        if: always()
        run: |
          .github\scripts\kill_active_ssh_sessions.ps1
{%- endmacro -%}

# Template is at:    .github/templates/windows_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}

on:
{%- if is_default %}
  pull_request:
{%- endif %}
  push:
{%- for label in ciflow_config.labels | sort %}
  {%- if loop.first %}
    tags:
  {%- endif %}
  {%- if label != "ciflow/default" %}
      - '!{{ label }}/*'
  {%- endif %}
{%- endfor %}
{%- if not is_scheduled %}
    branches:
      - master
      - release/*
{%- else %}
  schedule:
    - cron: !{{ is_scheduled }}
{%- endif %}
  workflow_dispatch:

env:
  BUILD_ENVIRONMENT: !{{ build_environment }}
  BUILD_WHEEL: 1
  MAX_JOBS: 8
  CUDA_VERSION: "!{{ cuda_version }}"
  IN_CI: 1
  IS_GHA: 1
  INSTALL_WINDOWS_SDK: 1
  PYTHON_VERSION: "3.8"
  PYTORCH_RETRY_TEST_CASES: 1
  PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
  SCCACHE_BUCKET: "ossci-compiler-cache"
  VC_PRODUCT: "BuildTools"
  VC_VERSION: ""
  VS_VERSION: "16.8.6"
  VC_YEAR: "2019"
  ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
  no_proxy: !{{ common.squid_no_proxy }}
  AWS_DEFAULT_REGION: us-east-1
  PR_NUMBER: ${{ github.event.pull_request.number }}
  SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
{%- if build_with_debug %}
  DEBUG: 1
{%- endif %}
{%- if cuda_version != "cpu" %}
  TORCH_CUDA_ARCH_LIST: "7.0"
{%- endif %}
  USE_CUDA: !{{ 1 if cuda_version != "cpu" else 0 }}

!{{ common.concurrency(build_environment) }}

jobs:
  build:
    runs-on: "windows.4xlarge"
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      JOB_BASE_NAME: !{{ build_environment }}-build
      http_proxy: "!{{ common. squid_proxy }}"
      https_proxy: "!{{ common.squid_proxy }}"
    steps:
      - name: print labels
        run: echo "${PR_LABELS}"
      - name: "[FB EMPLOYEES] Enable SSH (Click me for login details)"
        uses: seemethere/add-github-ssh-key@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      !{{ common.checkout() }}
      !{{ common.display_ec2_information() }}
      - name: Install Visual Studio 2019 toolchain
        shell: powershell
        run: |
          .\.circleci\scripts\vs_install.ps1
{%- if cuda_version != "cpu" %}
      - name: Install Cuda
        shell: bash
        run: |
          .circleci/scripts/windows_cuda_install.sh
      - name: Install Cudnn
        shell: bash
        run: |
          .circleci/scripts/windows_cudnn_install.sh
{%- endif %}
      !{{ common.parse_ref() }}
      - name: Build
        shell: bash
        env:
          PYTORCH_FINAL_PACKAGE_DIR: /c/${{ github.run_id }}/build-results/
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
        run: |
          .jenkins/pytorch/win-build.sh
      # Upload to github so that people can click and download artifacts
      - name: Upload artifacts to s3
        uses: !{{ common.upload_artifact_s3_action }}
        with:
          retention-days: 14
          if-no-files-found: error
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: C:\${{ github.run_id }}\build-results
      !{{ common.wait_and_kill_ssh_windows() }}
      - name: Cleanup build-results and workspaces
        if: always()
        shell: bash
        env:
          PYTORCH_FINAL_PACKAGE_DIR: /c/${{ github.run_id }}/build-results/
        # Should remove the entirety of pytorch-${{ github.run_id }}
        run: |
          rm -rf "${PYTORCH_FINAL_PACKAGE_DIR}"
          rm -rf ./*

  generate-test-matrix:
    needs: build
    runs-on: ubuntu-18.04
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      TEST_RUNNER_TYPE: !{{ test_runner_type }}
      NUM_TEST_SHARDS: !{{ num_test_shards }}
      NUM_TEST_SHARDS_ON_PULL_REQUEST: !{{ num_test_shards_on_pull_request }}
      PR_BODY: ${{ github.event.pull_request.body }}
      NOGPU_RUNNER_TYPE: windows.4xlarge
      ENABLE_FORCE_ON_CPU_TEST: !{{ enable_force_on_cpu_test }}
      RUN_SMOKE_TESTS_ONLY_ON_PR: !{{ only_run_smoke_tests_on_pull_request }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      render-matrix: ${{ steps.set-matrix.outputs.render-matrix }}
      ignore-disabled-issues: ${{ steps.set-matrix.outputs.ignore-disabled-issues }}
    container:
      image: python:3.9
    steps:
      - name: Install dependencies
        run: pip install typing-extensions==3.10
      - name: Clone pytorch/pytorch
        uses: zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9
      - name: Generating test matrix
        id: set-matrix
        run: .github/scripts/generate_pytorch_test_matrix.py

  test:
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      JOB_BASE_NAME: !{{ build_environment }}-test
      SHARD_NUMBER: ${{ matrix.shard }}
      NUM_TEST_SHARDS: ${{ matrix.num_shards }}
      TEST_CONFIG: ${{ matrix.config }}
      http_proxy: "!{{ common.squid_proxy }}"
      https_proxy: "!{{ common.squid_proxy }}"
      PYTORCH_IGNORE_DISABLED_ISSUES: ${{ needs.generate-test-matrix.outputs.ignore-disabled-issues }}
    needs: [build, generate-test-matrix]
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      !{{ common.display_ec2_information() }}
      - name: "[FB EMPLOYEES] Enable SSH (Click me for login details)"
        uses: seemethere/add-github-ssh-key@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      !{{ common.checkout() }}
      - name: Install Visual Studio 2019 toolchain
        shell: powershell
        run: |
          .\.circleci\scripts\vs_install.ps1
{%- if cuda_version != "cpu" %}
      - name: Install Cuda
        if: ${{ matrix.config != 'force_on_cpu' }}
        shell: bash
        run: |
          .circleci/scripts/windows_cuda_install.sh
      - name: Install Cudnn
        if: ${{ matrix.config != 'force_on_cpu' }}
        shell: bash
        run: |
          .circleci/scripts/windows_cudnn_install.sh
{%- endif %}
      - uses: seemethere/download-artifact-s3@0504774707cbc8603d7dca922e8026eb8bf3b47b
        name: Download PyTorch Build Artifacts
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: C:\${{ github.run_id }}\build-results
      - name: Check build-results folder
        shell: powershell
        run: |
          tree /F C:\$Env:GITHUB_RUN_ID\build-results
      # Needed for coverage in win-test.sh
      - uses: actions/setup-python@v2
        name: Setup Python3
        with:
          python-version: '3.x'
      - name: Test
        shell: bash
        env:
          PYTORCH_FINAL_PACKAGE_DIR: /c/${{ github.run_id }}/build-results/
        # Time out the test phase after 3.5 hours
        timeout-minutes: 210
        run: |
            .jenkins/pytorch/win-test.sh
      !{{ common.upload_downloaded_files(name='windows') }}
      !{{ common.upload_test_reports(name='windows') }}
      !{{ common.render_test_results() }}
      !{{ common.wait_and_kill_ssh_windows() }}
      !{{ common.parse_ref() }}
      !{{ common.upload_test_statistics(build_environment) }}
      - name: Cleanup workspace
        if: always()
        shell: bash
        # Should remove the entirety of pytorch-${{ github.run_id }}
        run: |
          rm -rf ./*
