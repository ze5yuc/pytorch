{% import 'common.yml.j2' as common %}

{%- block name -%}
# Template is at:    .github/templates/ios_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}
{%- endblock %}

on:
{%- if is_default %}
  pull_request:
{%- endif -%}

{%- if is_scheduled %}
  schedule:
    - cron: !{{ is_scheduled }}
{%- else %}
  push:
    branches:
      - master
      - release/*
{%- endif %}
{%- for label in ciflow_config.labels | sort %}
  {%- if loop.first %}
    tags:
  {%- endif %}
  {%- if label != "ciflow/default" %}
      - '!{{ label }}/*'
  {%- endif %}
{%- endfor %}
  workflow_dispatch:

env:
  BUILD_ENVIRONMENT: !{{ build_environment }}
  IN_CI: 1
  IS_GHA: 1
  IOS_PLATFORM: !{{ ios_platform }}
  IOS_ARCH: !{{ ios_arch }}
!{{ common.set_xcode_version(xcode_version) }}

jobs:
{% block build +%}
  build:
    # NOTE: These builds will not run successfully without running on `pytorch/pytorch` due to the limitations
    #       of accessing secrets from forked pull requests and IOS' dependency on secrets for their build/test
    if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: macos-10.15
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      JOB_BASE_NAME: !{{ build_environment }}-build
      IOS_CERT_KEY_2022: ${{ secrets.IOS_CERT_KEY_2022 }}
      IOS_CERT_SECRET: ${{ secrets.IOS_CERT_SECRET }}
      IOS_DEV_TEAM_ID: ${{ secrets.IOS_DEV_TEAM_ID }}
      IOS_SIGN_KEY_2022: ${{ secrets.IOS_SIGN_KEY_2022 }}
      PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
    steps:
      - name: print labels
        run: echo "${PR_LABELS}"
      !{{ common.checkout() }}
      - name: Populate CI build options
        run: |
          # Most builds use the lite interpreter, if certain builds shouldn't
          # build the lite interpreter this env variable should get over-written
          # in the following case statement
          echo "BUILD_LITE_INTERPRETER=1" >> "${GITHUB_ENV}"

          case ${BUILD_ENVIRONMENT} in
            *metal*)
              echo "USE_PYTORCH_METAL=1" >> "${GITHUB_ENV}"
              ;;
            *full_jit*)
              echo "BUILD_LITE_INTERPRETER=0" >> "${GITHUB_ENV}"
              ;;
            *custom*)
              echo "SELECTED_OP_LIST=${GITHUB_WORKSPACE}/ios/TestApp/custom_build/mobilenetv2.yaml" >> "${GITHUB_ENV}"
              ;;
            *coreml*)
              echo "USE_COREML_DELEGATE=1" >> "${GITHUB_ENV}"
              ;;
          esac
      - name: Install brew dependencies
        run: |
          # Install dependencies
          brew install libtool
      - name: Install conda and dependencies
        run: |
          # Install conda, setup-miniconda messes with the path that messes with the ruby stuff we do later on
          curl --retry 3 -o "${RUNNER_TEMP}/conda.sh" https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
          chmod +x "${RUNNER_TEMP}/conda.sh"
          /bin/bash "${RUNNER_TEMP}/conda.sh" -b -p "${RUNNER_TEMP}/anaconda"
          echo "${RUNNER_TEMP}/anaconda/bin" >> "${GITHUB_PATH}"
          # shellcheck disable=SC1091
          source "${RUNNER_TEMP}/anaconda/bin/activate"
          conda install -y \
            cffi \
            cmake \
            mkl \
            mkl-include \
            ninja \
            numpy \
            pyyaml \
            requests \
            setuptools \
            typing_extensions
      - name: Run Fastlane
        run: |
          set -x
          cd ios/TestApp
          # install fastlane
          sudo gem install bundler && bundle install
          # install certificates
          echo "${IOS_CERT_KEY_2022}" >> cert.txt
          base64 --decode cert.txt -o Certificates.p12
          rm cert.txt
          bundle exec fastlane install_root_cert
          bundle exec fastlane install_dev_cert
          # install the provisioning profile
          PROFILE=PyTorch_CI_2022.mobileprovision
          PROVISIONING_PROFILES=~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -pv "${PROVISIONING_PROFILES}"
          cd "${PROVISIONING_PROFILES}"
          echo "${IOS_SIGN_KEY_2022}" >> cert.txt
          base64 --decode cert.txt -o ${PROFILE}
          rm cert.txt
      - name: Build
        run: |
          # shellcheck disable=SC1091
          source "${RUNNER_TEMP}/anaconda/bin/activate"
          export TCLLIBPATH="/usr/local/lib"
          python -VV
          export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname "$(which conda)")/../"}
          scripts/build_ios.sh
      - name: Run Build Test
        run: |
          PROFILE=PyTorch_CI_2022
          # run the ruby build script
          if ! [ -x "$(command -v xcodebuild)" ]; then
            echo 'Error: xcodebuild is not installed.'
            exit 1
          fi
          if [ "${IOS_PLATFORM}" != "SIMULATOR" ]; then
            ruby scripts/xcode_build.rb -i build_ios/install -x ios/TestApp/TestApp.xcodeproj -p "${IOS_PLATFORM}" -c "${PROFILE}" -t "${IOS_DEV_TEAM_ID}"
          else
            ruby scripts/xcode_build.rb -i build_ios/install -x ios/TestApp/TestApp.xcodeproj -p "${IOS_PLATFORM}"
          fi
{%- if ios_platform == "SIMULATOR" %}
      - name: Run Simulator Tests
        run: |
          # shellcheck disable=SC1091
          source "${RUNNER_TEMP}/anaconda/bin/activate"
          pip3 install --pre torch torchvision torchaudio -f https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html
          # generate models for differnet backends
          cd "${GITHUB_WORKSPACE}/ios/TestApp/benchmark"
          mkdir -p ../models
          if [ "${USE_COREML_DELEGATE}" == 1 ]; then
            pip install coremltools==5.0b5
            pip install six==1.16.0
            python coreml_backend.py
          else
            python trace_model.py
          fi
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            echo "Setting up the TestApp for LiteInterpreter"
            ruby setup.rb --lite 1
          else
            echo "Setting up the TestApp for Full JIT"
            ruby setup.rb
          fi
          cd "${GITHUB_WORKSPACE}/ios/TestApp"
          instruments -s -devices
          if [ "${BUILD_LITE_INTERPRETER}" == 1 ]; then
            if [ "${USE_COREML_DELEGATE}" == 1 ]; then
              fastlane scan --only_testing TestAppTests/TestAppTests/testCoreML
            else
              fastlane scan --only_testing TestAppTests/TestAppTests/testLiteInterpreter
            fi
          else
            fastlane scan --only_testing TestAppTests/TestAppTests/testFullJIT
          fi
{%- endif -%}
{% endblock +%}

!{{ common.concurrency(build_environment) }}
