{% import 'common.yml.j2' as common %}

{%- block name -%}
# Template is at:    .github/templates/linux_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}
{%- endblock %}

on:
{%- if is_default %}
  pull_request:
{%- endif %}
  push:
{%- if enable_doc_jobs and is_scheduled %}
    tags:
      # NOTE: Binary build pipelines should only get triggered on release candidate builds
      # Release candidate tags look like: v1.11.0-rc1
      - v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+
{%- endif %}
{%- for label in ciflow_config.labels | sort %}
  {%- if loop.first and not (enable_doc_jobs  and is_scheduled) %}
    tags:
  {%- endif %}
  {%- if label != "ciflow/default" %}
      - '!{{ label }}/*'
  {%- endif %}
{%- endfor %}
{%- if not is_scheduled and not only_on_pr %}
    branches:
      - master
      - release/*
{%- endif %}
{%- if is_scheduled and not only_on_pr %}
  schedule:
    - cron: !{{ is_scheduled }}
{%- endif %}
  workflow_dispatch:

env:
  BUILD_ENVIRONMENT: !{{ build_environment }}
  DOCKER_IMAGE_BASE: !{{ docker_image_base }}
  SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
  XLA_CLANG_CACHE_S3_BUCKET_NAME: ossci-compiler-clang-cache-circleci-xla
  TORCH_CUDA_ARCH_LIST: 5.2
  IN_CI: 1
  IS_GHA: 1
  # This is used for the phase of adding wheel tests only, will be removed once completed
  IN_WHEEL_TEST: 1
  # Used for custom_opertor, jit_hooks, custom_backend, see .jenkins/pytorch/build.sh
  CUSTOM_TEST_ARTIFACT_BUILD_DIR: build/custom_test_artifacts
  ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
  PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_DEFAULT_REGION: us-east-1
  PR_NUMBER: ${{ github.event.pull_request.number }}
  SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
  PYTORCH_RETRY_TEST_CASES: 1
{%- if build_with_debug %}
  DEBUG: 1
{%- endif %}
!{{ common.concurrency(build_environment) }}

jobs:
{% block build +%}
  build:
    runs-on: linux.2xlarge
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      JOB_BASE_NAME: !{{ build_environment }}-build
    outputs:
      docker_image: ${{ steps.calculate-tag.outputs.docker_image }}
    steps:
      - name: print labels
        run: echo "${PR_LABELS}"
      !{{ common.setup_ec2_linux() }}
      !{{ common.checkout() }}
      !{{ common.calculate_docker_image(false) }}
      - name: Pull Docker image
        run: |
          !{{ common.add_retry_to_env() }}
          retry docker pull "${DOCKER_IMAGE}"
      !{{ common.parse_ref() }}
      - name: Build
        env:
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
        run: |
          # detached container should get cleaned up by teardown_ec2_linux
          container_name=$(docker run \
            -e BUILD_ENVIRONMENT \
            -e JOB_BASE_NAME \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e AWS_DEFAULT_REGION \
            -e IS_GHA \
            -e PR_NUMBER \
            -e SHA1 \
            -e BRANCH \
            -e GITHUB_RUN_ID \
            -e SCCACHE_BUCKET \
            -e XLA_CLANG_CACHE_S3_BUCKET_NAME \
            -e CUSTOM_TEST_ARTIFACT_BUILD_DIR \
            -e SKIP_SCCACHE_INITIALIZATION=1 \
            -e TORCH_CUDA_ARCH_LIST \
            -e PR_LABELS \
            -e http_proxy="!{{ common.squid_proxy }}" -e https_proxy="!{{ common.squid_proxy }}" -e no_proxy="!{{ common.squid_no_proxy }}" \
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --tty \
            --detach \
            --user jenkins \
            -v "${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace" \
            -w /var/lib/jenkins/workspace \
            "${DOCKER_IMAGE}"
          )
          docker exec -t "${container_name}" sh -c 'sudo chown -R jenkins . && .jenkins/pytorch/build.sh'
      - name: Display and upload binary build size statistics (Click Me)
        # temporary hack: set CIRCLE_* vars, until we update
        # tools/stats/print_test_stats.py to natively support GitHub Actions
        env:
          SCRIBE_GRAPHQL_ACCESS_TOKEN: ${{ secrets.SCRIBE_GRAPHQL_ACCESS_TOKEN }}
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          TAG: ${{ steps.parse-ref.outputs.tag }}
          WORKFLOW_ID: '${{ github.run_id }}'
        run: |
          COMMIT_TIME=$(git log --max-count=1 --format=%ct || echo 0)
          export COMMIT_TIME
          pip3 install requests==2.26 boto3==1.16.34
          python3 -m tools.stats.upload_binary_size_to_scuba || exit 0
      - name: Chown workspace
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v "${ALPINE_IMAGE}" chown -R "$(id -u):$(id -g)" .
      {%- if build_generates_artifacts %}
      - name: Archive artifacts into zip
        run: |
          zip -1 -r artifacts.zip dist/ build/custom_test_artifacts build/lib build/bin .pytorch-test-times.json
      - uses: !{{ common.upload_artifact_s3_action }}
        name: Store PyTorch Build Artifacts on S3
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
          retention-days: 14
          if-no-files-found: error
          path:
            artifacts.zip
      {%- endif %}
      !{{ common.teardown_ec2_linux() }}
      - name: Hold runner for 2 hours or until ssh sessions have drained
        # Always hold for active ssh sessions
        if: always()
        run: .github/scripts/wait_for_ssh_to_drain.sh
      - name: Clean up docker images
        if: always()
        run: |
          # Prune all of the docker images
          docker system prune -af
{%- endblock %}
{%- if not exclude_test %}
{% block test +%}
  generate-test-matrix:
    needs: build
    runs-on: ubuntu-18.04
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      TEST_RUNNER_TYPE: !{{ test_runner_type }}
      ENABLE_DISTRIBUTED_TEST: !{{ enable_distributed_test }}
      ENABLE_JIT_LEGACY_TEST: !{{ enable_jit_legacy_test }}
      ENABLE_MULTIGPU_TEST: !{{ enable_multigpu_test }}
      ENABLE_NOGPU_NO_AVX_TEST: !{{ enable_nogpu_no_avx_test }}
      ENABLE_NOGPU_NO_AVX2_TEST: !{{ enable_nogpu_no_avx2_test }}
      ENABLE_SLOW_TEST: !{{ enable_slow_test }}
      ENABLE_DOCS_TEST: !{{ enable_docs_test }}
      ENABLE_BACKWARDS_COMPAT_TEST: !{{ enable_backwards_compat_test }}
      ENABLE_XLA_TEST: !{{ enable_xla_test }}
      ENABLE_NOARCH_TEST: !{{ enable_noarch_test }}
      NUM_TEST_SHARDS: !{{ num_test_shards }}
      MULTIGPU_RUNNER_TYPE: !{{ multigpu_runner_type }}
      DISTRIBUTED_GPU_RUNNER_TYPE: !{{ distributed_gpu_runner_type }}
      NOGPU_RUNNER_TYPE: linux.2xlarge
      PR_BODY: ${{ github.event.pull_request.body }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      render-matrix: ${{ steps.set-matrix.outputs.render-matrix }}
      ignore-disabled-issues: ${{ steps.set-matrix.outputs.ignore-disabled-issues }}
    container:
      image: python:3.9
    steps:
      - name: Install dependencies
        run: pip install typing-extensions==3.10
      - name: Clone pytorch/pytorch
        uses: zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9
      - name: Generating test matrix
        id: set-matrix
        run: .github/scripts/generate_pytorch_test_matrix.py

  test:
    needs: [build, generate-test-matrix]
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      DOCKER_IMAGE: ${{ needs.build.outputs.docker_image }}
      JOB_BASE_NAME: !{{ build_environment }}-test
      TEST_CONFIG: ${{ matrix.config }}
      SHARD_NUMBER: ${{ matrix.shard }}
      NUM_TEST_SHARDS: ${{ matrix.num_shards }}
      PYTORCH_IGNORE_DISABLED_ISSUES: ${{ needs.generate-test-matrix.outputs.ignore-disabled-issues }}
    steps:
{%- if 'rocm' in test_runner_type %}
      !{{ common.setup_rocm_linux() }}
{%- else %}
      !{{ common.setup_ec2_linux() }}
{%- endif %}
      !{{ common.checkout() }}
      - name: Pull Docker image
        run: |
          !{{ common.add_retry_to_env() }}
          retry docker pull "${DOCKER_IMAGE}"
{%- if 'rocm' in test_runner_type %}
      - name: ROCm set GPU_FLAG
        if: ${{ contains(env.BUILD_ENVIRONMENT, 'rocm') && !contains(matrix.config, 'nogpu') }}
        run: |
          echo "GPU_FLAG=--device=/dev/mem --device=/dev/kfd --device=/dev/dri --group-add video --group-add daemon" >> "${GITHUB_ENV}"
{%- else %}
      - name: Install nvidia driver, nvidia-docker runtime, set GPU_FLAG
        if: ${{ contains(env.BUILD_ENVIRONMENT, 'cuda') && !contains(matrix.config, 'nogpu') }}
        run: |
          bash .github/scripts/install_nvidia_utils_linux.sh
          echo "GPU_FLAG=--gpus all" >> "${GITHUB_ENV}"
{%- endif %}
      - name: Determine shm-size
        run: |
          shm_size="1g"
          case "${BUILD_ENVIRONMENT}" in
            *cuda*)
              shm_size="2g"
              ;;
            *rocm*)
              shm_size="8g"
              ;;
          esac
          echo "SHM_SIZE=${shm_size}" >> "${GITHUB_ENV}"
      - uses: seemethere/download-artifact-s3@0504774707cbc8603d7dca922e8026eb8bf3b47b
        name: Download PyTorch Build Artifacts
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
      - name: Unzip artifacts
        run: |
          unzip -o artifacts.zip
      - name: Output disk space left
        run: |
{%- if 'rocm' in test_runner_type %}
          df -H
{%- else %}
          sudo df -H
{%- endif %}
      !{{ common.parse_ref() }}
      - name: Test
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
        # Time out the test phase after !{{ timeout_after }} minutes
        timeout-minutes: !{{ timeout_after }}
        run: |
          set -x

          if [[ $TEST_CONFIG == 'multigpu' ]]; then
            TEST_COMMAND=.jenkins/pytorch/multigpu-test.sh
          elif [[ $BUILD_ENVIRONMENT == *onnx* ]]; then
            TEST_COMMAND=.jenkins/caffe2/test.sh
          else
            TEST_COMMAND=.jenkins/pytorch/test.sh
          fi
{%- if 'rocm' not in test_runner_type %}
          PROXY_ENV=
          # NOTE: XLA multiprocessing tests appear to have issues with squid proxy, going to disable for now
          #       We should investigate whether or not there's a list of hostnames we can add to no_proxy to
          #       make it so that we shouldn't have to fully disable squid for XLA tests
          if [[ $TEST_CONFIG != 'xla' ]]; then
            # shellcheck disable=SC2089
            PROXY_ENV="-e http_proxy=!{{ common.squid_proxy }} -e https_proxy=!{{ common.squid_proxy }} -e no_proxy=!{{ common.squid_no_proxy }}"
          fi
{%- endif %}
          # detached container should get cleaned up by teardown_ec2_linux
          # TODO: Stop building test binaries as part of the build phase
          # Used for GPU_FLAG since that doesn't play nice
          # shellcheck disable=SC2086,SC2090
          container_name=$(docker run \
            ${GPU_FLAG:-} \
            -e BUILD_ENVIRONMENT \
            -e PR_NUMBER \
            -e CUSTOM_TEST_ARTIFACT_BUILD_DIR \
            -e GITHUB_ACTIONS \
            -e IN_CI \
            -e IS_GHA \
            -e BRANCH \
            -e SHA1 \
            -e AWS_DEFAULT_REGION \
            -e IN_WHEEL_TEST \
            -e SHARD_NUMBER \
            -e JOB_BASE_NAME \
            -e TEST_CONFIG \
            -e NUM_TEST_SHARDS \
            -e PYTORCH_IGNORE_DISABLED_ISSUES \
            -e PYTORCH_RETRY_TEST_CASES \
            -e PR_LABELS \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e SCCACHE_BUCKET \
            -e XLA_CLANG_CACHE_S3_BUCKET_NAME \
{%- if 'rocm' not in test_runner_type %}
            ${PROXY_ENV} \
{%- endif %}
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --ulimit stack=10485760:83886080 \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
{%- if 'rocm' not in test_runner_type %}
            --ipc=host \
{%- endif %}
            --shm-size="${SHM_SIZE}" \
            --tty \
            --detach \
            --name="${container_name}" \
            --user jenkins \
            -v "${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace" \
            -w /var/lib/jenkins/workspace \
            "${DOCKER_IMAGE}"
          )
{%- if 'rocm' in test_runner_type %}
          # jenkins user does not have write permission to mounted workspace; work-around by copying within container to jenkins home
          docker exec -t "${container_name}" sh -c "cd .. && cp -R workspace pytorch && cd pytorch && pip install dist/*.whl && ${TEST_COMMAND}"
          # copy test results back to the mounted workspace, needed sudo, resulting permissions were correct
          docker exec -t "${container_name}" sh -c "cd ../pytorch && sudo cp -R test/test-reports ../workspace/test"
{%- else %}
          docker exec -t "${container_name}" sh -c "sudo chown -R jenkins . && pip install dist/*.whl && ${TEST_COMMAND}"
{%- endif %}
{%- if 'rocm' not in test_runner_type %}
      - name: Chown workspace
        if: always()
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v "${ALPINE_IMAGE}" chown -R "$(id -u):$(id -g)" .
{%- endif %}
      !{{ common.render_test_results() }}
{%- if 'rocm' in test_runner_type %}
      !{{ common.upload_downloaded_files(name='linux', use_s3=False) }}
      !{{ common.upload_test_reports(name='linux', artifact_name="test-reports", use_s3=False) }}
{%- else %}
      !{{ common.upload_downloaded_files(name='linux') }}
      !{{ common.upload_test_reports(name='linux') }}
{%- endif %}
      !{{ common.upload_test_statistics(build_environment) }}
{%- if 'rocm' in test_runner_type %}
      !{{ common.teardown_rocm_linux() }}
{%- else %}
      !{{ common.teardown_ec2_linux() }}
{%- endif %}
{% endblock %}
{%- endif -%}
{%- if enable_doc_jobs %}
  build-docs:
    runs-on: linux.2xlarge
    timeout-minutes: !{{ common.timeout_minutes }}
    strategy:
      matrix:
        docs_type: [cpp, python]
    needs: [build]
    env:
      DOCKER_IMAGE: ${{ needs.build.outputs.docker_image }}
      DOCS_TYPE: ${{ matrix.docs_type }}
      WITH_PUSH: ${{ github.event_name == 'schedule' || startsWith(github.event.ref, 'refs/tags/v') }}
    steps:
      !{{ common.setup_ec2_linux() }}
      !{{ common.checkout() }}
      - name: Pull Docker image
        run: |
          !{{ common.add_retry_to_env() }}
          retry docker pull "${DOCKER_IMAGE}"
      - uses: seemethere/download-artifact-s3@0504774707cbc8603d7dca922e8026eb8bf3b47b
        name: Download PyTorch Build Artifacts
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
      - name: Unzip artifacts
        run: |
          unzip -o artifacts.zip
{%- if is_scheduled %}
      - name: Generate netrc (only for docs-push)
        if: ${{ github.event_name == 'schedule' || startsWith(github.event.ref, 'refs/tags/v') }}
        env:
          GITHUB_PYTORCHBOT_TOKEN: ${{ secrets.GH_PYTORCHBOT_TOKEN }}
        run: |
          # set credentials for https pushing
          echo "machine github.com" > "${RUNNER_TEMP}/.netrc"
          echo "login pytorchbot" >> "${RUNNER_TEMP}/.netrc"
          echo "password ${GITHUB_PYTORCHBOT_TOKEN}" >> "${RUNNER_TEMP}/.netrc"
{%- endif %}
      - name: Build ${{ matrix.docs_type }} docs
        run: |
          set -ex
          time docker pull "${DOCKER_IMAGE}" > /dev/null
          # Convert refs/tags/v1.12.0rc3 into 1.12
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+\.[0-9]+)\.* ]]; then
            target="${BASH_REMATCH[1]}"
          else
            target="master"
          fi
          # detached container should get cleaned up by teardown_ec2_linux
          container_name=$(docker run \
            -e BUILD_ENVIRONMENT \
            -e CUSTOM_TEST_ARTIFACT_BUILD_DIR \
            -e IN_CI \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e SHA1="$GITHUB_SHA" \
            -e DOCS_VERSION="${target}" \
            -e DOCS_TYPE \
            -e PR_LABELS \
            -e WITH_PUSH \
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --tty \
            --detach \
            --user jenkins \
{%- if is_scheduled %}
            -v "${RUNNER_TEMP}/.netrc":/var/lib/jenkins/.netrc \
{%- endif %}
            -v "${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace" \
            -w /var/lib/jenkins/workspace \
            "${DOCKER_IMAGE}"
          )
          docker exec -t "${container_name}" bash -c "sudo chown -R jenkins . && pip install dist/*.whl && ./.circleci/scripts/${DOCS_TYPE}_doc_push_script.sh"
      - name: Chown workspace
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v "${ALPINE_IMAGE}" chown -R "$(id -u):$(id -g)" .
      - uses: !{{ common.upload_artifact_s3_action }}
        name: Upload Python Docs Preview
        if: ${{ github.event_name == 'pull_request' && matrix.docs_type == 'python' }}
        with:
          retention-days: 14
          s3-bucket: doc-previews
          if-no-files-found: error
          path: pytorch.github.io/docs/master/
          s3-prefix: pytorch/${{ github.event.pull_request.number }}
      - uses: !{{ common.upload_artifact_s3_action }}
        name: Upload C++ Docs Preview
        if: ${{ github.event_name == 'pull_request' && matrix.docs_type == 'cpp' }}
        with:
          retention-days: 14
          if-no-files-found: error
          s3-bucket: doc-previews
          path: cppdocs/
          s3-prefix: pytorch/${{ github.event.pull_request.number }}/cppdocs
{%- endif -%}
