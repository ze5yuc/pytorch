{% import 'common.yml.j2' as common %}

{%- block name -%}
# Template is at:    .github/templates/macos_ci_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}
{%- endblock %}

on:
{%- if is_default -%}
  pull_request:
{%- endif -%}

{%- if is_scheduled %}
  schedule:
    - cron: !{{ is_scheduled }}
{%- else %}
  push:
    branches:
      - master
      - release/*
{%- endif %}
{%- for label in ciflow_config.labels | sort %}
  {%- if loop.first %}
    tags:
  {%- endif %}
  {%- if label != "ciflow/default" %}
      - '!{{ label }}/*'
  {%- endif %}
{%- endfor %}
  workflow_dispatch:

# For setup-miniconda, see https://github.com/conda-incubator/setup-miniconda/issues/179
defaults:
  run:
    shell: bash -e -l {0}
env:
  BUILD_ENVIRONMENT: !{{ build_environment }}
  COMPACT_JOB_NAME: !{{ build_environment }}
  IN_CI: 1
  IS_GHA: 1
  PYTORCH_RETRY_TEST_CASES: 1
!{{ common.set_xcode_version(xcode_version) }}

jobs:
{% block build +%}
  build:
    runs-on: !{{ test_runner_type }}
    env:
      JOB_BASE_NAME: !{{ build_environment }}
      # For sccache access (only on non-forked PRs)
      AWS_ACCESS_KEY_ID: ${{ secrets.MACOS_SCCACHE_S3_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.MACOS_SCCACHE_S3_SECRET_ACCESS_KEY }}
      PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
    steps:
      - name: print labels
        run: echo "${PR_LABELS}"
      !{{ common.checkout() }}
      !{{ common.setup_miniconda("3.8") }}
      - name: Install macOS homebrew dependencies
        run: |
          # Install dependencies
          brew install libomp
      - name: Install sccache (only for non-forked PRs, and pushes to trunk)
        if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          sudo curl --retry 3 https://s3.amazonaws.com/ossci-macos/sccache_v2.15 --output /usr/local/bin/sccache
          sudo chmod +x /usr/local/bin/sccache
          echo "SCCACHE_BUCKET=ossci-compiler-cache-circleci-v2" >> "${GITHUB_ENV}"
      - name: Build
        run: |
          echo "CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname "$(which conda)")/../"}" >> "${GITHUB_ENV}"
          .jenkins/pytorch/macos-build.sh
{%- if build_generates_artifacts %}
      - name: Archive artifacts into zip
        run: |
          zip -1 -r artifacts.zip dist/
      - uses: actions/upload-artifact@v2
        name: Store PyTorch Build Artifacts on GHA
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
          retention-days: 14
          if-no-files-found: error
          path:
            artifacts.zip
{%- endif %}
{% endblock +%}
{%- if not exclude_test %}
{% block test +%}
  {%- for test_job in test_jobs %}
  !{{ test_job.id }}:
    name: !{{ test_job.name }}
    needs: build
    runs-on: !{{ test_job.runner }}
    timeout-minutes: !{{ common.timeout_minutes }}
    env:
      JOB_BASE_NAME: !{{ build_environment }}-test
      TEST_CONFIG: !{{ test_job.config }}
      SHARD_NUMBER: !{{ test_job.shard }}
      NUM_TEST_SHARDS: !{{ test_job.num_shards }}
      PR_BODY: ${{ github.event.pull_request.body }}
    steps:
      !{{ common.checkout(submodules="false") }}
      - uses: actions/download-artifact@v2
        name: Download PyTorch Build Artifacts from GHA
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: .
      - name: Unzip artifacts
        run: |
          unzip -o artifacts.zip
      !{{ common.setup_miniconda("3.8") }}
      - name: Install macOS homebrew dependencies
        run: |
          # Install dependencies
          brew install libomp
      !{{ common.parse_ref() }}
      - name: Test
        run: |
          python3 -mpip install dist/*.whl
          .jenkins/pytorch/macos-test.sh
      !{{ common.render_test_results() }}
      !{{ common.upload_downloaded_files(name='macos', config=test_job.config, shard=test_job.shard, num_shards=test_job.num_shards, runner=test_job.runner, artifact_name="test-jsons", use_s3=False) }}
      !{{ common.upload_test_reports("macos", config=test_job.config, shard=test_job.shard, num_shards=test_job.num_shards, runner=test_job.runner, artifact_name="test-reports", use_s3=False) }}
      !{{ common.upload_test_statistics(build_environment, needs_credentials=True) }}
{%- endfor %}
{% endblock +%}
{%- endif %}

!{{ common.concurrency(build_environment) }}
