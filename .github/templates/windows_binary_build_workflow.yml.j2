{% import 'common.yml.j2' as common %}

{%- block name -%}
# Template is at:    .github/templates/windows_binary_build_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: !{{ build_environment }}
{%- endblock %}

{%- macro binary_env(config) -%}
    env:
      PYTORCH_ROOT: ${{ github.workspace }}/pytorch
      BUILDER_ROOT: ${{ github.workspace }}/builder
      PACKAGE_TYPE: !{{ config["package_type"] }}
      # TODO: This is a legacy variable that we eventually want to get rid of in
      #       favor of GPU_ARCH_VERSION
      DESIRED_CUDA: !{{ config["desired_cuda"] }}
{%- if config["gpu_arch_version"] %}
      GPU_ARCH_VERSION: !{{ config["gpu_arch_version"] }}
{%- endif %}
      GPU_ARCH_TYPE: !{{ config["gpu_arch_type"] }}
      SKIP_ALL_TESTS: 1
{%- if config["package_type"] == "libtorch" %}
      LIBTORCH_VARIANT: !{{ config["libtorch_variant"] }}
      DESIRED_DEVTOOLSET: !{{ config["devtoolset"] }}
      # This is a dummy value for libtorch to work correctly with our batch scripts
      # without this value pip does not get installed for some reason
      DESIRED_PYTHON: "3.7"
{%- else %}
      DESIRED_PYTHON: "!{{ config["python_version"] }}"
{%- endif %}
{%- endmacro %}

{%- macro set_runner_specific_vars() -%}
      # NOTE: These environment variables are put here so that they can be applied on every job equally
      #       They are also here because setting them at a workflow level doesn't give us access to the
      #       runner.temp variable, which we need.
      - name: Populate binary env
        shell: bash
        run: |
          echo "BINARY_ENV_FILE=${RUNNER_TEMP}/env" >> "${GITHUB_ENV}"
          echo "PYTORCH_FINAL_PACKAGE_DIR=${RUNNER_TEMP}/artifacts" >> "${GITHUB_ENV}"
          echo "WIN_PACKAGE_WORK_DIR=${RUNNER_TEMP}"
{%- endmacro %}

on:
  push:
    # NOTE: Meta Employees can trigger new nightlies using: https://fburl.com/trigger_pytorch_nightly_build
    branches:
      - nightly
    tags:
      # NOTE: Binary build pipelines should only get triggered on release candidate builds
      # Release candidate tags look like: v1.11.0-rc1
      - v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+
{%- for label in ciflow_config.labels | sort %}
  {%- if label != "ciflow/default" %}
      - '!{{ label }}/*'
  {%- endif %}
{%- endfor %}
  workflow_dispatch:

env:
  # Needed for conda builds
  ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
  ANACONDA_USER: pytorch
  AWS_DEFAULT_REGION: us-east-1
  BUILD_ENVIRONMENT: !{{ build_environment }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IN_CI: 1
  IS_GHA: 1
  PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
  PR_NUMBER: ${{ github.event.pull_request.number }}
  PYTORCH_RETRY_TEST_CASES: 1
  SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
  SKIP_ALL_TESTS: 1
!{{ common.concurrency(build_environment) }}

jobs:
{%- for config in build_configs %}
  !{{ config["build_name"] }}-build:
    runs-on: windows.4xlarge
    timeout-minutes: !{{ common.timeout_minutes }}
    !{{ binary_env(config) }}
    steps:
      !{{ common.setup_ec2_windows() }}
      !{{ set_runner_specific_vars() }}
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
        with:
          path: ${{ env.PYTORCH_ROOT }}
          submodules: recursive
      - name: Clone pytorch/builder
        uses: actions/checkout@v2
        with:
          repository: pytorch/builder
          path: ${{ env.BUILDER_ROOT }}
      - name: Populate binary env
        shell: bash
        run: |
          "${PYTORCH_ROOT}/.circleci/scripts/binary_populate_env.sh"
      - name: Build PyTorch binary
        shell: bash
        run: |
          "${PYTORCH_ROOT}/.circleci/scripts/binary_windows_build.sh"
      - uses: !{{ common.upload_artifact_s3_action }}
        if: always()
        with:
          name: !{{ config["build_name"] }}
          retention-days: 14
          if-no-files-found: error
          path: "${{ env.PYTORCH_FINAL_PACKAGE_DIR }}"
      !{{ common.wait_and_kill_ssh_windows('pytorch') }}
  !{{ config["build_name"] }}-test:  # Testing
    if: ${{ github.repository_owner == 'pytorch' }}
    needs: !{{ config["build_name"] }}-build
{%- if config["gpu_arch_type"] == "cuda" %}
    runs-on: windows.8xlarge.nvidia.gpu
{%- else %}
    runs-on: windows.4xlarge
{%- endif %}
    timeout-minutes: !{{ common.timeout_minutes }}
    !{{ binary_env(config) }}
    steps:
      !{{ common.setup_ec2_windows() }}
      !{{ set_runner_specific_vars() }}
      - uses: seemethere/download-artifact-s3@0504774707cbc8603d7dca922e8026eb8bf3b47b
        name: Download Build Artifacts
        with:
          name: !{{ config["build_name"] }}
          path: "${{ env.PYTORCH_FINAL_PACKAGE_DIR }}"
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
        with:
          path: ${{ env.PYTORCH_ROOT }}
          submodules: recursive
      - name: Clone pytorch/builder
        uses: actions/checkout@v2
        with:
          repository: pytorch/builder
          path: ${{ env.BUILDER_ROOT }}
      - name: Populate binary env
        shell: bash
        run: |
          "${PYTORCH_ROOT}/.circleci/scripts/binary_populate_env.sh"
      - name: Test PyTorch binary
        shell: bash
        run: |
          "${PYTORCH_ROOT}/.circleci/scripts/binary_windows_test.sh"
      !{{ common.wait_and_kill_ssh_windows('pytorch') }}
  !{{ config["build_name"] }}-upload:  # Uploading
    runs-on: linux.2xlarge  # self hosted runner to download ec2 artifacts
    if: ${{ github.repository_owner == 'pytorch' }}
    needs: !{{ config["build_name"] }}-test
    !{{ binary_env(config) }}
    steps:
      !{{ common.setup_ec2_linux() }}
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
      - uses: seemethere/download-artifact-s3@0504774707cbc8603d7dca922e8026eb8bf3b47b
        name: Download Build Artifacts
        with:
          name: !{{ config["build_name"] }}
          path: "${{ runner.temp }}/artifacts/"
      - name: Set DRY_RUN (only for tagged pushes)
        if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')}}
        run: |
          echo "DRY_RUN=disabled" >> "$GITHUB_ENV"
      - name: Set UPLOAD_CHANNEL (only for tagged pushes)
        if: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')}}
        run: |
          # reference ends with an RC suffix
          if [[ ${GITHUB_REF_NAME} = *-rc[0-9]* ]]; then
            echo "UPLOAD_CHANNEL=test" >> "$GITHUB_ENV"
          fi
      - name: Upload binaries
        env:
          PKG_DIR: "${{ runner.temp }}/artifacts"
          UPLOAD_SUBFOLDER: "${{ env.DESIRED_CUDA }}"
          # When running these on pull_request events these should be blank
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PYTORCH_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PYTORCH_SECRET_KEY }}
          ANACONDA_API_TOKEN: ${{ secrets.CONDA_PYTORCHBOT_TOKEN }}
        run: |
          docker run --rm -i \
            -e ANACONDA_API_TOKEN \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e DRY_RUN \
            -e PACKAGE_TYPE \
            -e PKG_DIR=/artifacts \
            -e UPLOAD_CHANNEL \
            -e UPLOAD_SUBFOLDER \
            -v "${RUNNER_TEMP}/artifacts:/artifacts" \
            -v "${GITHUB_WORKSPACE}:/v" \
            -w /v \
            308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/miniconda3:4.10.3 \
            bash -c '.circleci/scripts/binary_upload.sh'
      !{{ common.teardown_ec2_linux() }}
{%- endfor %}
